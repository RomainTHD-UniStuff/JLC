-- programs ------------------------------------------------

entrypoints Prog ;

Program.   Prog ::= [TopDef] ;

TopFnDef.  TopDef ::= FuncDef ;

TopClsDef. TopDef ::= ClassDef ;

separator nonempty TopDef "" ;

-- classes -------------------------------------------------

ClsDef.    ClassDef ::= "class" Ident ClassInheritance "{" [Member] "}" ;

HBase.     ClassInheritance ::= ;

HExtends.  ClassInheritance ::= "extends" Ident ;

FnMember.  Member ::= FuncDef ;

AttrMember. Member ::= Type Ident ";" ;

separator Member "" ;

-- functions -----------------------------------------------

FnDef.     FuncDef ::= Type Ident "(" [Arg] ")" Blk ;

Argument.  Arg ::= Type Ident;

separator  Arg "," ;

-- statements ----------------------------------------------

Block.     Blk ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Blk ;

Decl.      Stmt ::= Type [Item] ";" ;

NoInit.    Item ::= Ident ;

Init.      Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

Ass.       Stmt ::= Ident "=" Expr  ";" ;

Incr.      Stmt ::= Ident "++"  ";" ;

Decr.      Stmt ::= Ident "--"  ";" ;

Ret.       Stmt ::= "return" Expr ";" ;

VRet.      Stmt ::= "return" ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" Stmt ;

-- Shift-reduce
CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt ;

While.     Stmt ::= "while" "(" Expr ")" Stmt ;

For.       Stmt ::= "for" "(" Type Ident ":" Expr ")" Stmt ;

SExp.      Stmt ::= Expr ";" ;

-- Types ---------------------------------------------------

Int.       Type ::= "int" ;

Doub.      Type ::= "double" ;

Bool.      Type ::= "boolean" ;

Void.      Type ::= "void" ;

-- Shift-reduce
Array.     Type ::= Type [Dim] ;

Class.     Type ::= Ident ;

-- separator  Type "," ;

-- Expressions ---------------------------------------------

-- Shift-reduce
ENull.     Expr8 ::= "(" Ident ")" "null" ;

EVar.      Expr7 ::= Ident ;

ELitInt.   Expr7 ::= Integer ;

ELitDoub.  Expr7 ::= Double;

ELitTrue.  Expr7 ::= "true" ;

ELitFalse. Expr7 ::= "false" ;

ESelf.     Expr7 ::= "self" ;

EApp.      Expr7 ::= Ident "(" [Expr] ")" ;

EString.   Expr7 ::= String ;

EIndex.    Expr7 ::= Expr7 Index ;
-- EIndex.    Expr6 ::= Expr7 Index [Index] ;

-- Hack since only function calls are allowed
EDot.      Expr6 ::= Expr6 "." Ident "(" [Expr] ")" ;

ENew.      Expr6 ::= "new" Type [Index] ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 8 ;

separator  Expr "," ;

-- dimensions ----------------------------------------------

SIndex.    Index ::= "[" Expr "]" ;

separator  Index "" ;

-- FIXME: Oddly enough, "[" "]" will create a shift reduce
SDim.      Dim ::= "[]" ;

separator nonempty Dim "" ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;
