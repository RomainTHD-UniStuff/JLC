-- Program -------------------------------------------------

entrypoints Prog ;

Program.        Prog    ::= [TopDef] ;

TopFnDef.       TopDef  ::= FuncDef ;
TopClsDef.      TopDef  ::= ClassDef ;

separator nonempty TopDef "" ;

-- Classes -------------------------------------------------

ClsDef.         ClassDef    ::= "class" Ident ClassInheritance "{" [Member] "}" ;

HBase.          ClassInheritance    ::= ;
HExtends.       ClassInheritance    ::= "extends" Ident ;

FnMember.       Member  ::= FuncDef ;
AttrMember.     Member  ::= Type Ident ";" ;

separator Member "" ;

-- Functions -----------------------------------------------

FnDef.          FuncDef ::= Type Ident "(" [Arg] ")" Blk ;

Argument.       Arg     ::= Type Ident ;

separator Arg "," ;

-- Statements ----------------------------------------------

Block.          Blk     ::= "{" [Stmt] "}" ;

Empty.          Stmt    ::= ";" ;

BStmt.          Stmt    ::= Blk ;

Decl.           Stmt    ::= Type [Item] ";" ;

NoInit.         Item    ::= Ident ;
Init.           Item    ::= Ident "=" Expr ;
separator nonempty Item "," ;

Ass.            Stmt    ::= LValue "=" Expr ";" ;

Incr.           Stmt    ::= Ident "++" ";" ;
Decr.           Stmt    ::= Ident "--" ";" ;

Ret.            Stmt    ::= "return" Expr ";" ;
VRet.           Stmt    ::= "return" ";" ;

-- Shift-reduce
CondElse.       Stmt    ::= "if" "(" Expr ")" Stmt "else" Stmt ;
Cond.           Stmt    ::= "if" "(" Expr ")" Stmt ;

While.          Stmt    ::= "while" "(" Expr ")" Stmt ;
For.            Stmt    ::= "for" "(" Type Ident ":" Expr ")" Stmt ;

SExp.           Stmt    ::= Expr ";" ;

separator Stmt "" ;

-- Types ---------------------------------------------------

Int.            Type    ::= "int" ;
Doub.           Type    ::= "double" ;
Bool.           Type    ::= "boolean" ;
Void.           Type    ::= "void" ;

-- Shift-reduce
Array.          Type    ::= Type [Dim] ;
-- Array.     Type ::= Type "[" "]" ;
Class.          Type    ::= Ident ;

-- LValue --------------------------------------------------

LValueV.        LValue  ::= Ident [Index] ;
LValueP.        LValue  ::= Ident [Index] "." LValue ;

-- Expressions ---------------------------------------------

-- Shift-reduce
ENull.          Expr7   ::= "(" Ident ")" "null" ;

EVar.           Expr6   ::= LValue ;

ELitInt.        Expr6   ::= Integer ;
ELitDoub.       Expr6   ::= Double;
ELitTrue.       Expr6   ::= "true" ;
ELitFalse.      Expr6   ::= "false" ;
ESelf.          Expr6   ::= "self" ;
EString.        Expr6   ::= String ;

ENew.           Expr6   ::= "new" Type [Index] ;
EApp.           Expr6   ::= LValue "(" [Expr] ")" ;

Neg.            Expr5   ::= "-" Expr6 ;
Not.            Expr5   ::= "!" Expr6 ;

EMul.           Expr4   ::= Expr4 MulOp Expr5 ;
EAdd.           Expr3   ::= Expr3 AddOp Expr4 ;
ERel.           Expr2   ::= Expr2 RelOp Expr3 ;

EAnd.           Expr1   ::= Expr2 "&&" Expr1 ;
EOr.            Expr    ::= Expr1 "||" Expr ;

coercions Expr 7 ;
separator Expr "," ;

-- Dimensions ----------------------------------------------

SIndex.         Index   ::= "[" Expr "]" ;
separator Index "" ;

DimenT.         Dim     ::= "[]" ;
separator nonempty Dim "" ;

-- Operators -----------------------------------------------

Plus.           AddOp   ::= "+" ;
Minus.          AddOp   ::= "-" ;

Times.          MulOp   ::= "*" ;
Div.            MulOp   ::= "/" ;
Mod.            MulOp   ::= "%" ;

LTH.            RelOp   ::= "<" ;
LE.             RelOp   ::= "<=" ;
GTH.            RelOp   ::= ">" ;
GE.             RelOp   ::= ">=" ;
EQU.            RelOp   ::= "==" ;
NE.             RelOp   ::= "!=" ;

-- Comments ------------------------------------------------

comment "#" ;
comment "//" ;
comment "/*" "*/" ;
